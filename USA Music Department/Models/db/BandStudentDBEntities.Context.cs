//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace USA_Music_Department.Models.db
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BandStudentDBEntities : DbContext
    {
        public BandStudentDBEntities()
            : base("name=BandStudentDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<InterestArea> InterestAreas { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<StudentContact> StudentContacts { get; set; }
        public virtual DbSet<InterestAreatoStudent> InterestAreatoStudents { get; set; }
    
        public virtual int DeleteStudentData(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStudentData", idParameter);
        }
    
        public virtual int InsertStudentData(string studentFirstName, string studentLastName, string studentAddress, string studentCity, string studentState, Nullable<int> studentZipCode, string studentPhone, string performanceMedium, Nullable<int> graduationYear, string emailAddress, ObjectParameter outputID)
        {
            var studentFirstNameParameter = studentFirstName != null ?
                new ObjectParameter("StudentFirstName", studentFirstName) :
                new ObjectParameter("StudentFirstName", typeof(string));
    
            var studentLastNameParameter = studentLastName != null ?
                new ObjectParameter("StudentLastName", studentLastName) :
                new ObjectParameter("StudentLastName", typeof(string));
    
            var studentAddressParameter = studentAddress != null ?
                new ObjectParameter("StudentAddress", studentAddress) :
                new ObjectParameter("StudentAddress", typeof(string));
    
            var studentCityParameter = studentCity != null ?
                new ObjectParameter("StudentCity", studentCity) :
                new ObjectParameter("StudentCity", typeof(string));
    
            var studentStateParameter = studentState != null ?
                new ObjectParameter("StudentState", studentState) :
                new ObjectParameter("StudentState", typeof(string));
    
            var studentZipCodeParameter = studentZipCode.HasValue ?
                new ObjectParameter("StudentZipCode", studentZipCode) :
                new ObjectParameter("StudentZipCode", typeof(int));
    
            var studentPhoneParameter = studentPhone != null ?
                new ObjectParameter("StudentPhone", studentPhone) :
                new ObjectParameter("StudentPhone", typeof(string));
    
            var performanceMediumParameter = performanceMedium != null ?
                new ObjectParameter("PerformanceMedium", performanceMedium) :
                new ObjectParameter("PerformanceMedium", typeof(string));
    
            var graduationYearParameter = graduationYear.HasValue ?
                new ObjectParameter("GraduationYear", graduationYear) :
                new ObjectParameter("GraduationYear", typeof(int));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStudentData", studentFirstNameParameter, studentLastNameParameter, studentAddressParameter, studentCityParameter, studentStateParameter, studentZipCodeParameter, studentPhoneParameter, performanceMediumParameter, graduationYearParameter, emailAddressParameter, outputID);
        }
    
        public virtual int CreateUpdate_InterestAreas(Nullable<int> studentID, Nullable<bool> bMMusicEdVocal, Nullable<bool> bMMusicEdInst, Nullable<bool> bMMusicPerfVocal, Nullable<bool> bMMusicPerfInst, Nullable<bool> bMMusicElecStudiesBusiness, Nullable<bool> bMMusicElecStudiesOutsideFields, Nullable<bool> mMPerfPiano, Nullable<bool> mMPerfVocal, Nullable<bool> mMCollabPiano, Nullable<bool> musicMinor, Nullable<bool> instEnsembles, Nullable<bool> choralEnsembles, Nullable<bool> operaTheater, Nullable<bool> jMB, string other)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var bMMusicEdVocalParameter = bMMusicEdVocal.HasValue ?
                new ObjectParameter("BMMusicEdVocal", bMMusicEdVocal) :
                new ObjectParameter("BMMusicEdVocal", typeof(bool));
    
            var bMMusicEdInstParameter = bMMusicEdInst.HasValue ?
                new ObjectParameter("BMMusicEdInst", bMMusicEdInst) :
                new ObjectParameter("BMMusicEdInst", typeof(bool));
    
            var bMMusicPerfVocalParameter = bMMusicPerfVocal.HasValue ?
                new ObjectParameter("BMMusicPerfVocal", bMMusicPerfVocal) :
                new ObjectParameter("BMMusicPerfVocal", typeof(bool));
    
            var bMMusicPerfInstParameter = bMMusicPerfInst.HasValue ?
                new ObjectParameter("BMMusicPerfInst", bMMusicPerfInst) :
                new ObjectParameter("BMMusicPerfInst", typeof(bool));
    
            var bMMusicElecStudiesBusinessParameter = bMMusicElecStudiesBusiness.HasValue ?
                new ObjectParameter("BMMusicElecStudiesBusiness", bMMusicElecStudiesBusiness) :
                new ObjectParameter("BMMusicElecStudiesBusiness", typeof(bool));
    
            var bMMusicElecStudiesOutsideFieldsParameter = bMMusicElecStudiesOutsideFields.HasValue ?
                new ObjectParameter("BMMusicElecStudiesOutsideFields", bMMusicElecStudiesOutsideFields) :
                new ObjectParameter("BMMusicElecStudiesOutsideFields", typeof(bool));
    
            var mMPerfPianoParameter = mMPerfPiano.HasValue ?
                new ObjectParameter("MMPerfPiano", mMPerfPiano) :
                new ObjectParameter("MMPerfPiano", typeof(bool));
    
            var mMPerfVocalParameter = mMPerfVocal.HasValue ?
                new ObjectParameter("MMPerfVocal", mMPerfVocal) :
                new ObjectParameter("MMPerfVocal", typeof(bool));
    
            var mMCollabPianoParameter = mMCollabPiano.HasValue ?
                new ObjectParameter("MMCollabPiano", mMCollabPiano) :
                new ObjectParameter("MMCollabPiano", typeof(bool));
    
            var musicMinorParameter = musicMinor.HasValue ?
                new ObjectParameter("MusicMinor", musicMinor) :
                new ObjectParameter("MusicMinor", typeof(bool));
    
            var instEnsemblesParameter = instEnsembles.HasValue ?
                new ObjectParameter("InstEnsembles", instEnsembles) :
                new ObjectParameter("InstEnsembles", typeof(bool));
    
            var choralEnsemblesParameter = choralEnsembles.HasValue ?
                new ObjectParameter("ChoralEnsembles", choralEnsembles) :
                new ObjectParameter("ChoralEnsembles", typeof(bool));
    
            var operaTheaterParameter = operaTheater.HasValue ?
                new ObjectParameter("OperaTheater", operaTheater) :
                new ObjectParameter("OperaTheater", typeof(bool));
    
            var jMBParameter = jMB.HasValue ?
                new ObjectParameter("JMB", jMB) :
                new ObjectParameter("JMB", typeof(bool));
    
            var otherParameter = other != null ?
                new ObjectParameter("Other", other) :
                new ObjectParameter("Other", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateUpdate_InterestAreas", studentIDParameter, bMMusicEdVocalParameter, bMMusicEdInstParameter, bMMusicPerfVocalParameter, bMMusicPerfInstParameter, bMMusicElecStudiesBusinessParameter, bMMusicElecStudiesOutsideFieldsParameter, mMPerfPianoParameter, mMPerfVocalParameter, mMCollabPianoParameter, musicMinorParameter, instEnsemblesParameter, choralEnsemblesParameter, operaTheaterParameter, jMBParameter, otherParameter);
        }
    }
}
